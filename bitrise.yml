---
format_version: '6'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios

trigger_map:
- tag: v*.*.*
  workflow: schedule-stacks
- push_branch: 3.x.x
  workflow: deploy

workflows:
  _clone_repo:
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone: {}

  _prepare_xcode:
    before_run:
    - _clone_repo
    steps:
    - script:
        deps:
          brew:
          - name: node@14
          - name: yarn
        run_if: .IsCI
        inputs:
          - content: |-
              #!/bin/bash
              set -ex

              brew rm carthage --force || true

              curl -o carthage.zip https://codeload.github.com/nsoperations/Carthage/zip/refs/tags/0.46.1%2Bnsoperations
              unzip carthage.zip
              cd Carthage-0.46.1-nsoperations
              make install

              yarn --frozen-lockfile --check-files --prefer-offline

  _xcode:
    envs:
    - artifact: Realm.framework.zip
    - owner: StreamLayer
    - repo: realm-cocoa
    before_run:
      - _prepare_xcode
    steps:
    - script:
        deps:
          brew:
          - name: gh
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            if [ "$(carthage swift-version)" != "${EXPECTED_SWIFT}" ]; then
              echo "Invalid swift version" 1>&2
              exit 1
            fi

            # ensure its the latest version
            git -c protocol.version=2 submodule update --init --recursive
            git fetch --all
            git checkout v$RELEASE_VERSION

            swift_version=`echo ${EXPECTED_SWIFT} | awk -F+ '{print $1}'`
            # additional release tag
            # format of x.x.x-x.x.x
            RELEASE_TAG=${RELEASE_VERSION}-${swift_version}

            # clean possible cache
            rm -rf Carthage/Build

            carthage bootstrap
            carthage build --commitish $RELEASE_TAG --cache-builds --archive --archive-output $artifact

            git add .
            git commit --allow-empty -m "[skip ci] chore: created ${RELEASE_TAG} artifacts"

            git tag $RELEASE_TAG
            git remote set-url origin https://${owner}:${GH_TOKEN}@github.com/${owner}/${repo}.git
            git push origin refs/tags/${RELEASE_TAG}

            # find latest release
            ./node_modules/.bin/github-release upload \
              --owner $owner --repo $repo --token $GH_TOKEN --tag $RELEASE_TAG --prerelease true \
              $artifact

  # trigger xcode 12.5 build
  xcode_125:
    meta:
      bitrise.io:
        stack: osx-xcode-12.5.x
    envs:
    - EXPECTED_SWIFT: 5.4.2+8078d64771bb12a43bd33ed1fcba81b4
    after_run:
    - _xcode

  # trigger xcode 12.4 build
  xcode_124:
    meta:
      bitrise.io:
        stack: osx-xcode-12.4.x
    envs:
    - EXPECTED_SWIFT: 5.3.2+161bc4399f7fbcf26178ad0e509b2057
    after_run:
    - _xcode


  schedule-stacks:
    description: |-
      after initial assets were generated schedule different builds, which will create appropriate
      artifacts for respected platforms
    before_run:
    - _prepare_xcode
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            release=`node -e "process.stdout.write(require('./package.json').version)"`
            envman add --key RELEASE_VERSION --value ${release}

    - build-router-start:
        inputs:
        - workflows: xcode_125
        - wait_for_builds: 'false'
        - access_token: "$BITRISE_ACCESS_TOKEN"
        - environment_key_list: "RELEASE_VERSION\n"

    - build-router-start:
        inputs:
        - workflows: xcode_124
        - wait_for_builds: 'false'
        - access_token: "$BITRISE_ACCESS_TOKEN"
        - environment_key_list: "RELEASE_VERSION\n"


  deploy:
    before_run:
    - _prepare_xcode
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            yarn semantic-release
